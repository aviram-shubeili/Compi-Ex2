%{
/* Definitions section */
#include "output.hpp"
#include "source.hpp"
%}

/* Declarations */
%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token AND
%token OR
%token NOT
%token TRUE
%token FALSE
%token RETURN
%token IF
%token ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA                             
%token LPAREN                            
%token RPAREN                            
%token LBRACE
%token RBRACE
%token ASSIGN
%token RELOP
%token BINOP
%token ID
%token NUM
%token STRING

%%
/* Rules */
Program: Funcs                                                          ;
Funcs: /*epsilon*/                                                      ;
Funcs: FuncDecl Funcs                                                   ;
FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE     ;
RetType: Type                                                           ;
RetType:  VOID                                                          ;
Formals: /*epsilon*/                                                    ;
Formals: FormalsList                                                    ;
FormalsList: FormalDecl                                                 ;
FormalsList: FormalDecl COMMA FormalsList                               ;
FormalDecl: TypeAnnotation Type ID                                      ;
Statements: Statement                                                   ;
Statements: Statements Statement                                        ;
Statement: LBRACE Statements RBRACE                                     ;
Statement: TypeAnnotation Type ID SC                                    ;
Statement: TypeAnnotation Type ID ASSIGN Exp SC                         ;
Statement: ID ASSIGN Exp SC                                             ;
Statement: Call SC                                                      ;
Statement: RETURN SC                                                    ;
Statement: RETURN Exp SC                                                ;
Statement: IF LPAREN Exp RPAREN Statement                               ;
Statement: IF LPAREN Exp RPAREN Statement ELSE Statement                ;
Statement: WHILE LPAREN Exp RPAREN Statement                            ;
Statement: BREAK SC                                                     ;
Statement: CONTINUE SC                                                  ;
Call: ID LPAREN ExpList RPAREN                                          ;
Call: ID LPAREN RPAREN                                                  ;
ExpList: Exp                                                            ;
ExpList: Exp COMMA ExpList                                              ;
Type: INT                                                               ;
Type: BYTE                                                              ;
Type: BOOL                                                              ;
TypeAnnotation: /*epsilon*/                                             ;
TypeAnnotation: CONST                                                   ;
Exp: LPAREN Exp RPAREN                                                  ;
Exp: Exp BINOP Exp                                                      ;
Exp: ID                                                                 ;
Exp: Call                                                               ;
Exp: NUM                                                                ;
Exp: NUM B                                                              ;
Exp: STRING                                                             ;
Exp: TRUE                                                               ;
Exp: FALSE                                                              ;
Exp: NOT Exp                                                            ;
Exp: Exp AND Exp                                                        ;
Exp: Exp OR Exp                                                         ;
Exp: Exp RELOP Exp                                                      ;
Exp: LPAREN TypeAnnotation Type RPAREN Exp                              ;
%%
/* C user routines */

