%{
/* Definitions section */
#include "output.hpp"
#include "source.hpp"
extern int yylineno;
int yylex();
void yyerror(const char*);

%}
/* Declarations */

%token ID
%token NUM
%token STRING

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token TRUE
%token FALSE
%token RETURN
%nonassoc IF
%nonassoc ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%right ASSIGN

%left OR

%left AND

%left EQUALITY
%nonassoc RELATIONAL

%left ADDSUB_BINOP
%left MULDIV_BINOP

%left NOT


%left LPAREN
%left RPAREN
%token LBRACE
%token RBRACE
%%
/* Rules */
Program: Funcs                                                          { output::printProductionRule(1); } ;
Funcs: /*epsilon*/                                                      { output::printProductionRule(2); } ;
Funcs: FuncDecl Funcs                                                   { output::printProductionRule(3); } ;
FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE     { output::printProductionRule(4); } ;
RetType: Type                                                           { output::printProductionRule(5); } ;
RetType:  VOID                                                          { output::printProductionRule(6); } ;
Formals: /*epsilon*/                                                    { output::printProductionRule(7); } ;
Formals: FormalsList                                                    { output::printProductionRule(8); } ;
FormalsList: FormalDecl                                                 { output::printProductionRule(9); } ;
FormalsList: FormalDecl COMMA FormalsList                               { output::printProductionRule(10); } ;
FormalDecl: TypeAnnotation Type ID                                      { output::printProductionRule(11); } ;
Statements: Statement                                                   { output::printProductionRule(12); } ;
Statements: Statements Statement                                        { output::printProductionRule(13); } ;
Statement: LBRACE Statements RBRACE                                     { output::printProductionRule(14); } ;
Statement: TypeAnnotation Type ID SC                                    { output::printProductionRule(15); } ;
Statement: TypeAnnotation Type ID ASSIGN Exp SC                         { output::printProductionRule(16); } ;
Statement: ID ASSIGN Exp SC                                             { output::printProductionRule(17); } ;
Statement: Call SC                                                      { output::printProductionRule(18); } ;
Statement: RETURN SC                                                    { output::printProductionRule(19); } ;
Statement: RETURN Exp SC                                                { output::printProductionRule(20); } ;
Statement: IF LPAREN Exp RPAREN Statement %prec IF                      { output::printProductionRule(21); } ;
Statement: IF LPAREN Exp RPAREN Statement ELSE Statement                { output::printProductionRule(22); } ;
Statement: WHILE LPAREN Exp RPAREN Statement                            { output::printProductionRule(23); } ;
Statement: BREAK SC                                                     { output::printProductionRule(24); } ;
Statement: CONTINUE SC                                                  { output::printProductionRule(25); } ;
Call: ID LPAREN ExpList RPAREN                                          { output::printProductionRule(26); } ;
Call: ID LPAREN RPAREN                                                  { output::printProductionRule(27); } ;
ExpList: Exp                                                            { output::printProductionRule(28); } ;
ExpList: Exp COMMA ExpList                                              { output::printProductionRule(29); } ;
Type: INT                                                               { output::printProductionRule(30); } ;
Type: BYTE                                                              { output::printProductionRule(31); } ;
Type: BOOL                                                              { output::printProductionRule(32); } ;
TypeAnnotation: /*epsilon*/                                             { output::printProductionRule(33); } ;
TypeAnnotation: CONST                                                   { output::printProductionRule(34); } ;
Exp: LPAREN Exp RPAREN                                                  { output::printProductionRule(35); } ;
Exp: Exp MULDIV_BINOP Exp                                               { output::printProductionRule(36); } ;
Exp: Exp ADDSUB_BINOP Exp                                               { output::printProductionRule(36); } ;
Exp: ID                                                                 { output::printProductionRule(37); } ;
Exp: Call                                                               { output::printProductionRule(38); } ;
Exp: NUM                                                                { output::printProductionRule(39); } ;
Exp: NUM B                                                              { output::printProductionRule(40); } ;
Exp: STRING                                                             { output::printProductionRule(41); } ;
Exp: TRUE                                                               { output::printProductionRule(42); } ;
Exp: FALSE                                                              { output::printProductionRule(43); } ;
Exp: NOT Exp                                                            { output::printProductionRule(44); } ;
Exp: Exp AND Exp                                                        { output::printProductionRule(45); } ;
Exp: Exp OR Exp                                                         { output::printProductionRule(46); } ;
Exp: Exp RELATIONAL Exp                                                      { output::printProductionRule(47); } ;
Exp: Exp EQUALITY Exp                                                      { output::printProductionRule(47); } ;
Exp: LPAREN TypeAnnotation Type RPAREN Exp                              { output::printProductionRule(48); } ;
%%

/* C user routines */
int main() {
    return yyparse();
}
void yyerror(char const* msg) {
    output::errorSyn(((Node*) yylval)->lineno);
    exit(0);
}
